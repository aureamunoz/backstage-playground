# Stage 1 - Copy backstage's files and needed linux packages
FROM registry.access.redhat.com/ubi9/nodejs-18:1-80 as packages

USER 0

WORKDIR /app
COPY package.json yarn.lock tsconfig.json app-config.yaml ./
COPY packages packages

# Comment this out if you don't have any internal plugins
# COPY plugins plugins

RUN find packages \! -name "package.json" -mindepth 2 -maxdepth 2 -exec rm -rf {} \+

# Stage 2 - Install linux & node dependencies. Copy files from packages layer
FROM registry.access.redhat.com/ubi9/nodejs-18:1-80 as build

USER 0

RUN dnf install -y -q --allowerasing --nobest nodejs-devel nodejs-libs \
  # already installed or installed as deps:
  openssl openssl-devel ca-certificates make cmake cpp gcc gcc-c++ zlib zlib-devel brotli brotli-devel python3 nodejs-packaging && \
  dnf update -y && dnf clean all

RUN dnf upgrade --refresh -y && dnf install sqlite -y

RUN npm i -g yarn
RUN npm i -g node-gyp

WORKDIR /app
COPY --from=packages /app .

RUN yarn install --production=false --network-timeout 300000
COPY . .
RUN yarn tsc
RUN yarn --cwd packages/backend build

RUN mkdir packages/backend/dist/skeleton packages/backend/dist/bundle \
    && tar xzf packages/backend/dist/skeleton.tar.gz -C packages/backend/dist/skeleton \
    && tar xzf packages/backend/dist/bundle.tar.gz -C packages/backend/dist/bundle

# Stage 3 - Build the actual backend image and install production dependencies
FROM registry.access.redhat.com/ubi9/nodejs-18:1-80

USER 0

RUN dnf install -y -q --allowerasing --nobest python3 && \
  dnf update -y && dnf clean all

RUN dnf upgrade --refresh -y && dnf install sqlite -y
RUN npm i -g yarn

WORKDIR /app
# Copy the install dependencies from the build stage and context
COPY --from=build /app/yarn.lock /app/package.json /app/packages/backend/dist/skeleton/ ./
RUN yarn install --frozen-lockfile --production --network-timeout 600000

# Copy the built packages from the build stage
COPY --from=build /app/packages/backend/dist/bundle/ ./

# Copy any other files that we need at runtime
COPY app-config.yaml .

# This switches many Node.js dependencies to production mode.
ENV NODE_ENV production

RUN chown -R 1001:1001 ./
RUN fix-permissions ./

# From here on we use the user to run the backend.
USER 1001

CMD ["node", "packages/backend", "--config", "app-config.yaml"]